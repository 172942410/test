package com.yixiaobao.control;

import android.util.Log;

public class ControlData {

	private static final String TAG = "ControlData";
	private byte[]data;
	/**
	 * 构建函数 </p> 
	 * 执行成功(0x1000)： 0x55 0xaa 0x11 0xf1 0x10 0x00 0x00 0x02 0x4F 0x4B 0xXX
	 * 0xaa 0x55</p> 
	 * 执行失败(0x1001)： 0x55 0xaa 0x11 0xf1 0x10 0x01 0x00 0x05 0x45 0x52 0x52 0x4F
	 * 0x52 0xXX 0xaa 0x55</p> 
	 */
	public ControlData(){
		
	}

//	 final static byte[] data = new byte[]{0x55,(byte) 0xaa,0xf,0x11,(byte) 0x80,0x00,0x00,0x00,(byte) 0x99,0x00,(byte) 0xAA,0x55};
	
	/**
	 * 进入系统指令 
	 * <p>0x55 0xaa 起始标志 </p> 
	 * <p>0xf1 0x11 帧地址 </p> 
	 * <p>0x80 0x00 命令字 </p> 
	 * <p>0x00 0x00 包长度(包长度为0，没有数据块，直接是校验) </p> 
	 * <p>0xXX 校验字 ,目前都未0x99</p> 
	 * <p>0xAA 0x55</p> 
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarSystemIn() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,0xf,0x11,(byte) 0x80,0x00,0x00,0x00,(byte) 0x99,(byte) 0xAA,0x55};
//		byte[]data = new byte[]{0x55,(byte) 0xaa,0xf,0x11,(byte) 0x80,0x00,0x00,0x00,(byte) 0x99,(byte) 0xAA,0x55};
		return data;
	}

	/**
	 * 后备箱开启指令</p> 
	 * 后备箱打开(0x8103)</p> 
	 * 0x55 0xaa 起始标志</p> 
	 * 0xf1 0x11 帧地址</p> 
	 * 0x81 0x03 命令字</p> 
	 * 0x00 0x02 包长度 (包长度为0，没有数据块，直接是校验)</p> 
	 * 0x00 0x00 DATA部分参考表1 后备箱打开</p> 
	 * 0xXX 校验字,目前都未0x99</p> 
	 * 0xAA 0x55
	 * 
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarTrunkOpen() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,(byte) 0xf1,0x11,(byte) 0x81,0x03,0x00,0x02,0x00,0x00,(byte) 0x99,(byte) 0xAA,0x55};
		return data;
	}
	/**
	 * 后视镜收起指令</p> 
	 * 后视镜收起,打开(0x8101)</p> 
	 * 0x55 0xaa 起始标志</p> 
	 * 0xf1 0x11 帧地址</p>
	 * 0x81 0x01 命令字</p> 
	 * 0x00 0x02 包长度 (包长度为0，没有数据块，直接是校验)</p> 
	 * 0x00 0x00 后视镜打开</p> 
	 * 0xXX 校验字,目前都未0x99</p> 
	 * 0xAA 0x55
	 * 
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarRearviewClose() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,(byte) 0xf1,0x11,(byte) 0x81,0x01,0x00,0x02,0x00,0x00,(byte) 0x99,(byte) 0xAA,0x55};
		return data;
	}

	/**
	 * 后视镜打开指令</p> 
	 * 后视镜收起,打开(0x8101)</p> 
	 * 0x55 0xaa 起始标志</p> 
	 * 0xf1 0x11 帧地址</p>
	 * 0x81 0x01 命令字</p> 
	 * 0x00 0x02 包长度 (包长度为0，没有数据块，直接是校验)</p> 
	 * 0x00 0x01 后视镜打开</p> 
	 * 0xXX 校验字,目前都未0x99</p> 
	 * 0xAA 0x55
	 * 
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarRearviewOpen() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,(byte) 0xf1,0x11,(byte) 0x81,0x01,0x00,0x02,0x00,0x01,(byte) 0x99,(byte) 0xAA,0x55};
		if(data!=null){
			for(int i=0;i<data.length;i++){
				Log.i(TAG, "data["+i+"] = "+data[i]);
			}
		}
		return data;
	}

	/**
	 * 发送车窗升起指令</p>
	 * 车窗升起，下降 (0x8100)</p>
	 * 0x55 0xaa  起始标志</p>
	 * 0xf1 0x11  帧地址</p>
	 * 0x81 0x00  命令字</p>
	 * 0x00 0x02  包长度 (包长度为0，没有数据块，直接是校验)</p>
	 * 0x00 0x00  DATA部分参考表1 全部车窗升起</p>
	 * 0xXX      校验字,目前都未0x99</p>
	 * 0xAA 0x55</p>
	 * ===================</p>
	 * 0x00 00 :全部车窗升起</p>
	 * 0x00 01:左侧驾驶员车窗升起</p>
	 * 0x00 02:右侧副驾驶车窗升起</p>
	 * 0x00 03:左侧驾驶员后方车窗升起</p>
	 * 0x00 04:右测副驾驶后方车窗升起</p>
	 * ===================</p>
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarWindowUp() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,(byte) 0xf1,0x11,(byte) 0x81,0x00,0x00,0x02,0x00,0x00,(byte) 0x99,(byte) 0xAA,0x55};
		return data;
	}
	/**
	 * 发送车窗下降指令</p>
	 * 车窗升起，下降 (0x8100)</p>
	 * 0x55 0xaa  起始标志</p>
	 * 0xf1 0x11  帧地址</p>
	 * 0x81 0x00  命令字</p>
	 * 0x00 0x02  包长度 (包长度为0，没有数据块，直接是校验)</p>
	 * 0x01 0x00  DATA部分参考表1 全部车窗下降</p>
	 * 0xXX      校验字,目前都未0x99</p>
	 * 0xAA 0x55</p>
	 * ===================</p>
	 * 0x01 00 :全部车窗下降</p>
	 * 0x01 01:左侧驾驶员车窗下降</p>
	 * 0x01 02:右侧副驾驶车窗下降</p>
	 * 0x01 03:左侧驾驶员后方车窗下降</p>
	 * 0x01 04:右测副驾驶后方车窗下降</p>
	 * ===================</p>
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarWindowDown() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,(byte) 0xf1,0x11,(byte) 0x81,0x00,0x00,0x02,0x01,0x00,(byte) 0x99,(byte) 0xAA,0x55};
		return data;
	}

	/**
	 * 车门锁定指令</p> 
	 * 车门上锁，解锁 (0x8102)</p> 
	 * 0x55 0xaa 起始标志</p> 
	 * 0xf1 0x11 帧地址</p> 
	 * 0x81 0x02 命令字</p> 
	 * 0x00 0x02 包长度 (包长度为0，没有数据块，直接是校验)</p> 
	 * 0x00 0x00 DATA部分参考表1 全部车门上锁</p> 
	 * 0xXX 校验字,目前都未0x99</p> 
	 * 0xAA 0x55</p> 
	 * ===================</p>
	 * 0x00 00 :全部车门上锁</p> 
	 * 0x00 01:左侧驾驶员车门上锁</p> 
	 * 0x00 02:右侧副驾驶车门上锁</p> 
	 * 0x00 03:左侧驾驶员后方车门上锁</p> 
	 * 0x00 04:右测副驾驶后方车门上锁</p> 
	 * ===================
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarDoorLock() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,(byte) 0xf1,0x11,(byte) 0x81,0x02,0x00,0x02,0x00,0x00,(byte) 0x99,(byte) 0xAA,0x55};
		return data;
	}
	/**
	 * 车门解锁指令</p> 
	 * 车门上锁，解锁 (0x8102)</p> 
	 * 0x55 0xaa 起始标志</p> 
	 * 0xf1 0x11 帧地址</p> 
	 * 0x81 0x02 命令字</p> 
	 * 0x00 0x02 包长度 (包长度为0，没有数据块，直接是校验)</p> 
	 * 0x01 0x00 DATA部分参考表1 全部车门解锁</p> 
	 * 0xXX 校验字,目前都未0x99</p> 
	 * 0xAA 0x55</p> 
	 * ===================</p>
	 * 0x01 00:全部车门解锁</p>
	 * 0x01 01:左侧驾驶员车门解锁</p>
	 * 0x01 02:右侧副驾驶车门解锁</p>
	 * 0x01 03:左侧驾驶员后方车门解锁</p>
	 * 0x01 04:右测副驾驶后方车门解锁</p>
	 * ===================
	 * @return byte[] 以上的数据
	 */
	public byte[] sendCarDoorUnlock() {
		// TODO Auto-generated method stub
		data = new byte[]{0x55,(byte) 0xaa,(byte) 0xf1,0x11,(byte) 0x81,0x02,0x00,0x02,0x01,0x00,(byte) 0x99,(byte) 0xAA,0x55};
		return data;
	}
	
	public String toString(){
	if(data!=null){
		for(int i=0;i<data.length;i++){
			Log.i(TAG, "data["+i+"] = "+data[i]);
		}
	}
		return super.toString();
	}
}
